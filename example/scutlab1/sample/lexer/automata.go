// generated by goGen.go - do not edit
package lexer

import (
	"errors"
	"fmt"
)

// Automata
type Automata interface {
	RunGreedy(iter CharIterator) error
}

type t01 struct{}
func (a *t01) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'a':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'n':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'd':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t02 struct{}
func (a *t02) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 2:
			switch {
			case c == 'r':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'a':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'y':
				currentState = 5
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'a':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'r':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t03 struct{}
func (a *t03) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 2:
			switch {
			case c == 'g':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'i':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'n':
				currentState = 5
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'b':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'e':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t04 struct{}
func (a *t04) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'b':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'o':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'o':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'l':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t05 struct{}
func (a *t05) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'c':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'a':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'l':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'l':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t06 struct{}
func (a *t06) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 2:
			switch {
			case c == 's':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'e':
				currentState = 4
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'c':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'a':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t07 struct{}
func (a *t07) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'c':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'h':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'a':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'r':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t08 struct{}
func (a *t08) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		8: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 3:
			switch {
			case c == 's':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 't':
				currentState = 5
			default:
				break outer
			}
		case 5:
			switch {
			case c == 'a':
				currentState = 6
			default:
				break outer
			}
		case 6:
			switch {
			case c == 'n':
				currentState = 7
			default:
				break outer
			}
		case 7:
			switch {
			case c == 't':
				currentState = 8
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'c':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'o':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'n':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t09 struct{}
func (a *t09) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == 'i':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'm':
				currentState = 3
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'd':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t10 struct{}
func (a *t10) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'd':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'o':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t11 struct{}
func (a *t11) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'e':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'l':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 's':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'e':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t12 struct{}
func (a *t12) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'e':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'n':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'd':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t13 struct{}
func (a *t13) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 3:
			switch {
			case c == 's':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'e':
				currentState = 5
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'f':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'a':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'l':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t14 struct{}
func (a *t14) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == 'o':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'r':
				currentState = 3
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'f':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t15 struct{}
func (a *t15) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'i':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'f':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t16 struct{}
func (a *t16) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'i':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'n':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'p':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'u':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 't':
				currentState = 5
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t17 struct{}
func (a *t17) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		7: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 6:
			switch {
			case c == 'r':
				currentState = 7
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'i':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'n':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 't':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'e':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'g':
				currentState = 5
			default:
				break outer
			}
		case 5:
			switch {
			case c == 'e':
				currentState = 6
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t18 struct{}
func (a *t18) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'n':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'o':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 't':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t19 struct{}
func (a *t19) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == 'f':
				currentState = 2
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'o':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t20 struct{}
func (a *t20) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'o':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'r':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t21 struct{}
func (a *t21) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		6: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'o':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'u':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 't':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'p':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'u':
				currentState = 5
			default:
				break outer
			}
		case 5:
			switch {
			case c == 't':
				currentState = 6
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t22 struct{}
func (a *t22) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		9: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'p':
				currentState = 1
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'c':
				currentState = 4
			default:
				break outer
			}
		case 5:
			switch {
			case c == 'd':
				currentState = 6
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'o':
				currentState = 3
			default:
				break outer
			}
		case 6:
			switch {
			case c == 'u':
				currentState = 7
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'r':
				currentState = 2
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'e':
				currentState = 5
			default:
				break outer
			}
		case 7:
			switch {
			case c == 'r':
				currentState = 8
			default:
				break outer
			}
		case 8:
			switch {
			case c == 'e':
				currentState = 9
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t23 struct{}
func (a *t23) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		7: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 5:
			switch {
			case c == 'a':
				currentState = 6
			default:
				break outer
			}
		case 6:
			switch {
			case c == 'm':
				currentState = 7
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'p':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'r':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'o':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'g':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'r':
				currentState = 5
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t24 struct{}
func (a *t24) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == 'e':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'a':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'd':
				currentState = 4
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'r':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t25 struct{}
func (a *t25) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 3:
			switch {
			case c == 'l':
				currentState = 4
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'r':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'e':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'a':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t26 struct{}
func (a *t26) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		6: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'r':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'e':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'p':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'e':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'a':
				currentState = 5
			default:
				break outer
			}
		case 5:
			switch {
			case c == 't':
				currentState = 6
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t27 struct{}
func (a *t27) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == 'e':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 't':
				currentState = 3
			default:
				break outer
			}
		case 0:
			switch {
			case c == 's':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t28 struct{}
func (a *t28) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 's':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 't':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'o':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'p':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t29 struct{}
func (a *t29) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 't':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'h':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'e':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'n':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t30 struct{}
func (a *t30) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 't':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'o':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t31 struct{}
func (a *t31) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		4: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 3:
			switch {
			case c == 'e':
				currentState = 4
			default:
				break outer
			}
		case 0:
			switch {
			case c == 't':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'r':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'u':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t32 struct{}
func (a *t32) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 3:
			switch {
			case c == 'i':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'l':
				currentState = 5
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'u':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'n':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 't':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t33 struct{}
func (a *t33) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'v':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'a':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'r':
				currentState = 3
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t34 struct{}
func (a *t34) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == 'w':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == 'h':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'i':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 'l':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'e':
				currentState = 5
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t35 struct{}
func (a *t35) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		5: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == 'r':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case c == 'i':
				currentState = 3
			default:
				break outer
			}
		case 3:
			switch {
			case c == 't':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case c == 'e':
				currentState = 5
			default:
				break outer
			}
		case 0:
			switch {
			case c == 'w':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t36 struct{}
func (a *t36) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
		2: true,
		3: true,
		4: true,
		5: true,
		6: true,
		7: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '_':
				currentState = 1
			case 'a' <= c && c <= 'z':
				currentState = 3
			case 'A' <= c && c <= 'Z':
				currentState = 2
			default:
				break outer
			}
		case 2:
			switch {
			case 'a' <= c && c <= 'z':
				currentState = 6
			case 'A' <= c && c <= 'Z':
				currentState = 5
			case '0' <= c && c <= '9':
				currentState = 4
			case c == '_':
				currentState = 7
			default:
				break outer
			}
		case 3:
			switch {
			case '0' <= c && c <= '9':
				currentState = 4
			case c == '_':
				currentState = 7
			case 'A' <= c && c <= 'Z':
				currentState = 5
			case 'a' <= c && c <= 'z':
				currentState = 6
			default:
				break outer
			}
		case 7:
			switch {
			case 'A' <= c && c <= 'Z':
				currentState = 5
			case c == '_':
				currentState = 7
			case 'a' <= c && c <= 'z':
				currentState = 6
			case '0' <= c && c <= '9':
				currentState = 4
			default:
				break outer
			}
		case 4:
			switch {
			case 'A' <= c && c <= 'Z':
				currentState = 5
			case 'a' <= c && c <= 'z':
				currentState = 6
			case c == '_':
				currentState = 7
			case '0' <= c && c <= '9':
				currentState = 4
			default:
				break outer
			}
		case 6:
			switch {
			case c == '_':
				currentState = 7
			case '0' <= c && c <= '9':
				currentState = 4
			case 'a' <= c && c <= 'z':
				currentState = 6
			case 'A' <= c && c <= 'Z':
				currentState = 5
			default:
				break outer
			}
		case 1:
			switch {
			case '0' <= c && c <= '9':
				currentState = 4
			case 'a' <= c && c <= 'z':
				currentState = 6
			case c == '_':
				currentState = 7
			case 'A' <= c && c <= 'Z':
				currentState = 5
			default:
				break outer
			}
		case 5:
			switch {
			case 'A' <= c && c <= 'Z':
				currentState = 5
			case '0' <= c && c <= '9':
				currentState = 4
			case c == '_':
				currentState = 7
			case 'a' <= c && c <= 'z':
				currentState = 6
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t37 struct{}
func (a *t37) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 2:
			switch {
			case '0' <= c && c <= '9':
				currentState = 2
			default:
				break outer
			}
		case 0:
			switch {
			case '0' <= c && c <= '9':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case '0' <= c && c <= '9':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t38 struct{}
func (a *t38) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		3: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '\'':
				currentState = 1
			default:
				break outer
			}
		case 4:
			switch {
			case '\v' <= c && c <= '&':
				currentState = 5
			case '(' <= c && c <= '\U0010ffff':
				currentState = 2
			case c == '\'':
				currentState = 3
			case '\x01' <= c && c <= '\t':
				currentState = 4
			default:
				break outer
			}
		case 1:
			switch {
			case '(' <= c && c <= '\U0010ffff':
				currentState = 2
			case '\v' <= c && c <= '&':
				currentState = 5
			case c == '\'':
				currentState = 3
			case '\x01' <= c && c <= '\t':
				currentState = 4
			default:
				break outer
			}
		case 2:
			switch {
			case c == '\'':
				currentState = 3
			case '\x01' <= c && c <= '\t':
				currentState = 4
			case '\v' <= c && c <= '&':
				currentState = 5
			case '(' <= c && c <= '\U0010ffff':
				currentState = 2
			default:
				break outer
			}
		case 5:
			switch {
			case '\v' <= c && c <= '&':
				currentState = 5
			case c == '\'':
				currentState = 3
			case '(' <= c && c <= '\U0010ffff':
				currentState = 2
			case '\x01' <= c && c <= '\t':
				currentState = 4
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t39 struct{}
func (a *t39) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '(':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t40 struct{}
func (a *t40) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == ')':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t42 struct{}
func (a *t42) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		9: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 2:
			switch {
			case c == '*':
				currentState = 5
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			case '\x01' <= c && c <= '\t':
				currentState = 6
			case '\v' <= c && c <= ')':
				currentState = 4
			default:
				break outer
			}
		case 5:
			switch {
			case '\v' <= c && c <= '.':
				currentState = 8
			case c == '/':
				currentState = 9
			case '0' <= c && c <= '\U0010ffff':
				currentState = 10
			case '\x01' <= c && c <= '\t':
				currentState = 7
			default:
				break outer
			}
		case 1:
			switch {
			case c == '*':
				currentState = 2
			default:
				break outer
			}
		case 0:
			switch {
			case c == '/':
				currentState = 1
			default:
				break outer
			}
		case 3:
			switch {
			case '\x01' <= c && c <= '\t':
				currentState = 6
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			case '\v' <= c && c <= ')':
				currentState = 4
			case c == '*':
				currentState = 5
			default:
				break outer
			}
		case 6:
			switch {
			case '\v' <= c && c <= ')':
				currentState = 4
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			case '\x01' <= c && c <= '\t':
				currentState = 6
			case c == '*':
				currentState = 5
			default:
				break outer
			}
		case 8:
			switch {
			case '\x01' <= c && c <= '\t':
				currentState = 6
			case c == '*':
				currentState = 5
			case '\v' <= c && c <= ')':
				currentState = 4
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			default:
				break outer
			}
		case 7:
			switch {
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			case c == '*':
				currentState = 5
			case '\v' <= c && c <= ')':
				currentState = 4
			case '\x01' <= c && c <= '\t':
				currentState = 6
			default:
				break outer
			}
		case 4:
			switch {
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			case '\x01' <= c && c <= '\t':
				currentState = 6
			case c == '*':
				currentState = 5
			case '\v' <= c && c <= ')':
				currentState = 4
			default:
				break outer
			}
		case 10:
			switch {
			case '\x01' <= c && c <= '\t':
				currentState = 6
			case '\v' <= c && c <= ')':
				currentState = 4
			case '+' <= c && c <= '\U0010ffff':
				currentState = 3
			case c == '*':
				currentState = 5
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t41 struct{}
func (a *t41) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '*':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t43 struct{}
func (a *t43) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '+':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t44 struct{}
func (a *t44) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == ',':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t45 struct{}
func (a *t45) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '-':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t47 struct{}
func (a *t47) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == '.':
				currentState = 2
			default:
				break outer
			}
		case 0:
			switch {
			case c == '.':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t46 struct{}
func (a *t46) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '.':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t48 struct{}
func (a *t48) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '/':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t51 struct{}
func (a *t51) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == ':':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == '=':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t50 struct{}
func (a *t50) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == ':':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t52 struct{}
func (a *t52) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == ';':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t54 struct{}
func (a *t54) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 1:
			switch {
			case c == '=':
				currentState = 2
			default:
				break outer
			}
		case 0:
			switch {
			case c == '<':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t55 struct{}
func (a *t55) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '<':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == '>':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t53 struct{}
func (a *t53) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '<':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t56 struct{}
func (a *t56) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '=':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t58 struct{}
func (a *t58) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		2: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '>':
				currentState = 1
			default:
				break outer
			}
		case 1:
			switch {
			case c == '=':
				currentState = 2
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t57 struct{}
func (a *t57) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '>':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t59 struct{}
func (a *t59) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == '[':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}

type t60 struct{}
func (a *t60) RunGreedy(iter CharIterator) error {
	currentState := 0
	acceptState := map[int]bool{
		1: true,
	}

	c := iter.Peek()
outer:
	for {
		switch currentState {
		case 0:
			switch {
			case c == ']':
				currentState = 1
			default:
				break outer
			}
		default:
			break outer
		}
		iter.NextChar()
		c = iter.Peek()
	}

	if acceptState[currentState] {
		return nil
	}
	msg := fmt.Sprintf("%T run failed", a)
	return errors.New(msg)
}
