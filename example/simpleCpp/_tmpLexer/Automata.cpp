// generated by cppGen.go - do not edit
#include "Automata.h"

void IF::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'i') {
        goto s1;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'f') {
        goto s2;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s2:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string IF::name() {
    return "IF";
}

void ELSE::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'e') {
        goto s1;
    }
    goto bad;
s2:
    c = reader.nextChar();
    if (c == U's') {
        goto s3;
    }
    goto bad;
s3:
    c = reader.nextChar();
    if (c == U'e') {
        goto s4;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'l') {
        goto s2;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s4:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string ELSE::name() {
    return "ELSE";
}

void LPAREN::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'(') {
        goto s1;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string LPAREN::name() {
    return "LPAREN";
}

void RPAREN::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U')') {
        goto s1;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string RPAREN::name() {
    return "RPAREN";
}

void LBRACKET::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'{') {
        goto s1;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string LBRACKET::name() {
    return "LBRACKET";
}

void RBRACKET::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'}') {
        goto s1;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string RBRACKET::name() {
    return "RBRACKET";
}

void SEMICOLON::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U';') {
        goto s1;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string SEMICOLON::name() {
    return "SEMICOLON";
}

void VAR::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'v') {
        goto s1;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'a') {
        goto s2;
    }
    goto bad;
s2:
    c = reader.nextChar();
    if (c == U'r') {
        goto s3;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s3:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string VAR::name() {
    return "VAR";
}

void RETURN::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'r') {
        goto s1;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'e') {
        goto s2;
    }
    goto bad;
s2:
    c = reader.nextChar();
    if (c == U't') {
        goto s3;
    }
    goto bad;
s3:
    c = reader.nextChar();
    if (c == U'u') {
        goto s4;
    }
    goto bad;
s4:
    c = reader.nextChar();
    if (c == U'r') {
        goto s5;
    }
    goto bad;
s5:
    c = reader.nextChar();
    if (c == U'n') {
        goto s6;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s6:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string RETURN::name() {
    return "RETURN";
}

void EQ::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'=') {
        goto s1;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'=') {
        goto s2;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s2:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string EQ::name() {
    return "EQ";
}

void ASSIGN::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'=') {
        goto s1;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string ASSIGN::name() {
    return "ASSIGN";
}

void NUM::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (U'1' <= c && c <= U'9') {
        goto s2;
    }
    if (c == U'0') {
        goto s1;
    }
    goto bad;
s2:
    c = reader.nextChar();
    if (U'0' <= c && c <= U'9') {
        goto s3;
    }
    goto accept;
s3:
    c = reader.nextChar();
    if (U'0' <= c && c <= U'9') {
        goto s3;
    }
    goto accept;

bad:
    reader.setCurIdx(old);
    return;

s1:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string NUM::name() {
    return "NUM";
}

void IDENT::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'_') {
        goto s1;
    }
    if (U'A' <= c && c <= U'Z') {
        goto s2;
    }
    if (U'a' <= c && c <= U'z') {
        goto s3;
    }
    goto bad;
s7:
    c = reader.nextChar();
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (c == U'_') {
        goto s6;
    }
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    goto accept;
s6:
    c = reader.nextChar();
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (c == U'_') {
        goto s6;
    }
    goto accept;
s1:
    c = reader.nextChar();
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    if (c == U'_') {
        goto s6;
    }
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    goto accept;
s2:
    c = reader.nextChar();
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    if (c == U'_') {
        goto s6;
    }
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    goto accept;
s5:
    c = reader.nextChar();
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (c == U'_') {
        goto s6;
    }
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    goto accept;
s3:
    c = reader.nextChar();
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (c == U'_') {
        goto s6;
    }
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    goto accept;
s4:
    c = reader.nextChar();
    if (U'A' <= c && c <= U'Z') {
        goto s4;
    }
    if (c == U'_') {
        goto s6;
    }
    if (U'a' <= c && c <= U'z') {
        goto s5;
    }
    if (U'0' <= c && c <= U'9') {
        goto s7;
    }
    goto accept;

bad:
    reader.setCurIdx(old);
    return;

	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string IDENT::name() {
    return "IDENT";
}

void MCOMMENT::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'/') {
        goto s1;
    }
    goto bad;
s5:
    c = reader.nextChar();
    if (0x1 <= c && c <= U')') {
        goto s5;
    }
    if (c == U'*') {
        goto s4;
    }
    if (U'+' <= c && c <= 0x10ffff) {
        goto s3;
    }
    goto bad;
s2:
    c = reader.nextChar();
    if (U'+' <= c && c <= 0x10ffff) {
        goto s3;
    }
    if (0x1 <= c && c <= U')') {
        goto s5;
    }
    if (c == U'*') {
        goto s4;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'*') {
        goto s2;
    }
    goto bad;
s3:
    c = reader.nextChar();
    if (c == U'*') {
        goto s4;
    }
    if (0x1 <= c && c <= U')') {
        goto s5;
    }
    if (U'+' <= c && c <= 0x10ffff) {
        goto s3;
    }
    goto bad;
s4:
    c = reader.nextChar();
    if (0x1 <= c && c <= U'.') {
        goto s6;
    }
    if (c == U'/') {
        goto s8;
    }
    if (U'0' <= c && c <= 0x10ffff) {
        goto s7;
    }
    goto bad;
s6:
    c = reader.nextChar();
    if (0x1 <= c && c <= U')') {
        goto s5;
    }
    if (c == U'*') {
        goto s4;
    }
    if (U'+' <= c && c <= 0x10ffff) {
        goto s3;
    }
    goto bad;
s7:
    c = reader.nextChar();
    if (U'+' <= c && c <= 0x10ffff) {
        goto s3;
    }
    if (c == U'*') {
        goto s4;
    }
    if (0x1 <= c && c <= U')') {
        goto s5;
    }
    goto bad;

bad:
    reader.setCurIdx(old);
    return;

s8:
	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string MCOMMENT::name() {
    return "MCOMMENT";
}

void SCOMMENT::runGreedy(CharReader& reader) {
    auto old = reader.curIdx();
    char32_t c;

s0:
    c = reader.nextChar();
    if (c == U'/') {
        goto s1;
    }
    goto bad;
s1:
    c = reader.nextChar();
    if (c == U'/') {
        goto s2;
    }
    goto bad;
s2:
    c = reader.nextChar();
    if (0xb <= c && c <= 0x10ffff) {
        goto s3;
    }
    if (0x1 <= c && c <= 0x9) {
        goto s4;
    }
    goto accept;
s3:
    c = reader.nextChar();
    if (0xb <= c && c <= 0x10ffff) {
        goto s3;
    }
    if (0x1 <= c && c <= 0x9) {
        goto s4;
    }
    goto accept;
s4:
    c = reader.nextChar();
    if (0xb <= c && c <= 0x10ffff) {
        goto s3;
    }
    if (0x1 <= c && c <= 0x9) {
        goto s4;
    }
    goto accept;

bad:
    reader.setCurIdx(old);
    return;

	reader.nextChar();
accept:
	reader.setCurIdx(reader.curIdx() - 1);
    return;
}

std::string SCOMMENT::name() {
    return "SCOMMENT";
}
